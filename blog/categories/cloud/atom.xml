<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cloud | 研究研究]]></title>
  <link href="http://www.yanjiuyanjiu.com/blog/categories/cloud/atom.xml" rel="self"/>
  <link href="http://www.yanjiuyanjiu.com/"/>
  <updated>2013-06-11T17:01:05+08:00</updated>
  <id>http://www.yanjiuyanjiu.com/</id>
  <author>
    <name><![CDATA[soulmachine]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hadoop 集群安装详细步骤]]></title>
    <link href="http://www.yanjiuyanjiu.com/blog/20120103"/>
    <updated>2012-01-03T18:54:00+08:00</updated>
    <id>http://www.yanjiuyanjiu.com/blog/an-detailed-instruction-for-hadoop-cluster-installation</id>
    <content type="html"><![CDATA[<p>本文所使用的版本是 hadoop 1.0.0，即 <a href="http://www.iteye.com/news/23874">2011年12月27日发布的1.0正式版</a>。</p>

<p>详细安装步骤如下，有大步骤，每个步骤里面有小步骤，绝大部分是必选，只有2步是可选的，粗体表示要特别注意的地方。</p>

<h2 id="vmware-workstation-">1. 用vmware workstation 新建三台虚拟机</h2>
<p>首先用vmware workstation 新建一台ubuntu server，装好操作系统，安装各种必须的软件，包括安装好hadoop。安装好后然后用浅拷贝<code>Create a linked clone</code> 克隆出两台作为slave，这样有了三台ubuntu机器。启动三台机器，假设IP分别为<code>192.168.1.131, 192.168.1.132, 192.168.1.133</code>, 131做为master,132为 slave01, 133为slave02。</p>

<h2 id="section">2. 修改机器名</h2>
<p>这一步的作用是让命令行提示看起来好看点，由默认的 dev@bogon变为 dev@master，这步可选，optional，可以跳过。</p>

<ul>
  <li>192.168.1.131上执行</li>
</ul>

<p><code>bash
dev@bogon:~$ sudo vi /etc/hostname
</code>
输入<code>master</code>，重启，会发现命令提示符变为了 <code>dev@master:~$</code></p>

<ul>
  <li>192.168.1.132上执行</li>
</ul>

<p><code>bash
dev@bogon:~$ sudo vi /etc/hostname
</code>
输入<code>slave01</code>，重启，会发现命令提示符变为了 <code>dev@slave01:~$</code></p>

<ul>
  <li>192.168.1.133上执行</li>
</ul>

<p><code>bash
dev@bogon:~$ sudo vi /etc/hostname
</code>
输入<code>slave02</code>，重启，会发现命令提示符变为了 <code>dev@slave02:~$</code></p>

<!-- more -->

<h2 id="masterhostsslave">3. 修改master的hosts文件，并拷贝到每台slave上</h2>

<p><code>bash
dev@master:~$ sudo vi /etc/hosts
</code>
添加三行内容</p>

<p><code>bash
192.168.1.131 master  
192.168.1.133 slave01  
192.168.1.134 slave02  
</code>
<strong>注意一定要注释掉</strong></p>

<p><code>
# 127.0.1.1      bogon.localdomain       bogon
</code></p>

<p>最后hosts文件内容如下：</p>

<p><code>bash
127.0.0.1       localhost
# 127.0.1.1      bogon.localdomain       bogon
192.168.1.131 master
192.168.1.133 slave01
192.168.1.134 slave02
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
</code></p>

<ul>
  <li>将hosts文件拷贝到另外两台台机器上，覆盖原来的hosts文件</li>
</ul>

<p>``` bash
dev@master:~$ scp /etc/hosts dev@192.168.1.132:~</p>

<p>dev@master:~$ scp /etc/hosts dev@192.168.1.133:~</p>

<p>```
* 在192.168.1.132上执行</p>

<p><code>bash
dev@slave01:~$ sudo mv hosts /etc/hosts
</code>
* 在192.168.1.133上执行</p>

<p><code>bash
dev@slave02:~$ sudo mv hosts /etc/hosts
</code></p>

<h2 id="master-">4. 配置 master 无密码登陆到所有机器（<strong>包括本机</strong>）</h2>

<p>``` bash
dev@master:~$ ssh-keygen -t rsa</p>

<p>dev@master:~$ cat .ssh/id_rsa.pub » .ssh/authorized_keys</p>

<p>dev@master:~$ scp .ssh/id_rsa.pub dev@192.168.1.132:~/</p>

<p>dev@master:~$ scp .ssh/id_rsa.pub dev@192.168.1.133:~/</p>

<p>dev@slave01:~$ cat id_rsa.pub » .ssh/authorized_keys</p>

<p>dev@slave02:~$ cat id_rsa.pub » .ssh/authorized_keys
```
测试一下，</p>

<p><code>bash
dev@master:~$ ssh slav01
</code></p>

<p>如果登陆不上，试试先关闭slave01的防火墙，</p>

<p><code>bash
dev@slave01:~$ sudo ufw disable
</code></p>

<h2 id="hadoop">5. 复制hadoop安装包到所有机器</h2>
<p>从hadoop.apache.org下载 hadoop-1.0.0-bin.tar.gz，上传到master中，解压，然后复制到其他机器，解压。</p>

<p>``` bash
dev@master:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz</p>

<p>dev@master:~$ scp hadoop-1.0.0-bin.tar.gz dev@192.168.1.133:~</p>

<p>dev@master:~$ scp hadoop-1.0.0-bin.tar.gz dev@192.168.1.134:~</p>

<p>dev@slave01:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz</p>

<p>dev@slave02:~$ tar -zxvf hadoop-1.0.0-bin.tar.gz
```</p>

<h2 id="section-1">6. 编辑配置文件</h2>

<p>``` bash
dev@master:~$ cd hadoop-1.0.0/etc/hadoop</p>

<p>dev@master:~/hadoop-1.0.0/etc/hadoop$  vi hadoop-env.sh
```
仅需要设置JAVA_HOME，</p>

<p>``` bash
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386</p>

<p>dev@master:~/hadoop-1.0.0/etc/hadoop$  vi core-site.xml
```</p>

<p>``` xml</p>
<configuration>
<property>
<name>fs.default.name</name>
<value>hdfs://master:9000</value>
</property>
<property>
<name>hadoop.tmp.dir</name>
<value>/home/dev/hadoop_tmp/</value>
</property>
</configuration>
<p>```</p>

<p><code>bash
dev@master:~/hadoop-1.0.0/etc/hadoop$  vi mapred-site.xml
</code></p>

<p>``` xml</p>
<configuration>
<property>
<name>mapred.job.tracker</name>
<value>master:9001</value>
</property>
</configuration>
<p>```</p>

<p><code>bash
dev@master:~/hadoop-1.0.0/etc/hadoop$  vi hdfs-site.xml
</code></p>

<p>``` xml</p>
<configuration>
<property>
<name>dfs.replication</name>
<value>3</value>
</property>
</configuration>
<p>```</p>

<p>``` bash
dev@master:~/hadoop-1.0.0/etc/hadoop$  vi masters</p>

<p>192.168.1.133</p>

<p>dev@master:~/hadoop-1.0.0/etc/hadoop$  vi slaves</p>

<p>192.168.1.133</p>

<p>192.168.1.134
```</p>

<h2 id="slave">7. 将配置文件拷贝到各台slave</h2>

<p>``` bash
dev@master:~/hadoop-1.0.0/etc/hadoop$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.133:~/hadoop-1.0.0/etc/hadoop</p>

<p>dev@master:~/hadoop-1.0.0/etc/hadoop$ scp hadoop-env.sh core-site.xml hdfs-site.xml mapred-site.xml masters slaves dev@192.168.1.134:~/hadoop-1.0.0/etc/hadoop
```
（master和slaves这2个配置文件可以不拷贝到slave机器上，只在master上保存即可。待验证）</p>

<h2 id="section-2">8. 设置环境变量</h2>
<ul>
  <li>设置master的环境变量</li>
</ul>

<p>``` bash
dev@master:~$ vi .bashrc</p>

<p>export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
export HADOOP_HOME=~/hadoop-1.0.0
export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin
export CLASSPATH=$CLASSPATH:$HADOOP_HOME/share/hadoop/hadoop-core-1.0.0.jar</p>

<p>export HADOOP_HOME=~/hadoop-1.0.0</p>

<p>export PATH=$PATH:$HADOOP_HOME/bin</p>

<p>dev@master:~$ source .bashrc
```
* 将master上的.bashrc拷贝到其他机器，并source刷新。</p>

<p>``` bash
dev@master:~$ scp .bashrc dev@192.168.1.133:~</p>

<p>dev@master:~$ scp .bashrc dev@192.168.1.134:~</p>

<p>dev@slave01:~$ source .bashrc</p>

<p>dev@slave02:~$ source .bashrc
```</p>

<h2 id="hadoop-1">9. 运行 hadoop</h2>

<p>``` bash
dev@master:~$ hadoop  namenode -format  （只需一次，下次启动不再需要格式化，只需 start-all.sh）</p>

<p>dev@master:~$ start-all.sh
```</p>

<h2 id="section-3">10. 检查是否运行成功</h2>

<p>``` bash
dev@master:~$ jps</p>

<p>2615 NameNode
2767 JobTracker
2874 Jps</p>

<p>dev@slave01:~$ jps</p>

<p>3415 DataNode
3582 TaskTracker
3499 SecondaryNameNode
3619 Jps</p>

<p>dev@slave02:~$ jps</p>

<p>3741 Jps
3618 DataNode
3702 TaskTracker
```</p>

<h2 id="hadoop-2">11. 停止 hadoop集群</h2>

<p><code>bash
dev@master:~$ stop-all.sh
</code>
让 slave 节点也 可以启动 整个hadoop集群</p>

<h2 id="section-4">注意</h2>
<ol>
  <li>
    <p>stat-all.sh 启动后，刚刚开始，namenode的日志里有些异常，是正常的，过一两分钟就好了，如果两分钟后，还有异常不断在打印，就有问题了。datanode的日志，从一开始，正常情况下，就没有异常，如果报了异常，说明有异常，要去排除。</p>
  </li>
  <li>
    <p>masters文件，这个文件很容易被误解，它实际上存放的是secondarynamenode，而不是namenode。</p>

    <blockquote>
      <p>An HDFS instance is started on a cluster by logging in to the NameNode machine and running$HADOOP_HOME/bin/start-dfs.sh (orstart-all.sh ). This script. starts a local instance of the NameNode process, logs into every machine listed in theconf/slaves file and starts an instance of the DataNode process, and logs into every machine listed in theconf/masters file and starts an instance of the SecondaryNameNode process. Themasters file does not govern which nodes become NameNodes or JobTrackers; those are started on the machine(s) wherebin/start-dfs.sh andbin/start-mapred.sh are executed. A more accurate filename might be “secondaries,” but that’s not currently the case.</p>
    </blockquote>

    <p>参考以下三篇文章：
 <a href="http://www.cloudera.com/blog/2009/02/multi-host-secondarynamenode-configuration/">Multi-host SecondaryNameNode Configuration</a><br />
 <a href="http://blog.csdn.net/dajuezhao/article/details/5987580">SecondaryNamenode应用摘记</a>
 <a href="http://blog.csdn.net/AE86_FC/article/details/5284181">hadoop下运行多个SecondaryNameNode的配置</a></p>
  </li>
  <li>
    <p>一定要注释掉 hosts里面的 <code>#127.0.1.1      bogon.localdomain       bogon</code>，参考 <a href="http://blog.sina.com.cn/s/blog_631ffec50100w700.html">Hadoop集群机器命名机制</a>，<a href="http://blog.csdn.net/singno116/article/details/6298995">hadoop集群环境安装中的hosts 配置问题</a>。</p>
  </li>
  <li>
    <p>当测试ssh是否能连通时，如果连接不上，先记得要关闭防火墙，<code>sudo ufw disable</code>，参考<a href="http://blog.csdn.net/make19830723/article/details/6230074">hadoop集群安装步骤</a>。</p>
  </li>
</ol>

<h2 id="section-5">未解决的疑惑</h2>
<ol>
  <li>有的很多文章，比如这篇，<a href="http://blog.csdn.net/cuishi0/article/details/6824884">Hadoop集群安装</a>，在core-site.xml, mapred-site.xml，直接写上ip:port，这样就不用修改hosts文件了。可是我这样配置，老是不成功。为此我还<a href="http://stackoverflow.com/questions/8702637/hadoop-conf-fs-default-name-cant-be-setted-ipport-format-directly">在stackoverflow上发了帖子</a>。<a href="http://51mst.iteye.com/blog/1152439">这篇文章</a>又说只能用host:port的形式。因此ip:port的格式是否能成功还待验证。如果有高手用ip:port配置成功过，请在下面留言或给我发email，一起交流:)</li>
</ol>
]]></content>
  </entry>
  
</feed>
